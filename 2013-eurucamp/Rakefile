require 'hexpress'
require 'fileutils'
require 'tempfile'
require_relative 'watch_task'

namespace :hexpress do

  desc 'watch the presentation and theme for changes and rebuild'
  watch ['presentation.md', 'stylesheets', 'images', 'javascripts'] do
    dest = Tempfile.new('presentation.html')
    File.open('presentation.html') { |src| FileUtils.copy_stream(src, dest) }
    dest.close
    Rake::Task['hexpress:build'].execute
    puts "="*80
    print `diff -u #{dest.path} presentation.html`
  end

  desc 'build the presentation html'
  task :build do
    Dir['p*.md'].each do |infile|
      include Hexpress::Processors

      doc = Hexpress::Document.new(File.read(infile))
      #presentation = Hexpress::Presentation.new(doc, type: :revealjs)

      doc = doc.process(
        HrToSections.new('body', H[:div, class: 'step']),
        ImpressJs::AddImpressJs.new('transition-duration' => 0),
        ImpressJs::AutoOffsets.new,
        AddGoogleFont.new('Open Sans', %w[300 400 800 300italic 400italic 800italic]),
        AddGoogleFont.new('Fauna One'),
        GraphvizDot.new('.language-dot'),
        ->(doc) { add_custom_assets(doc) },
        ->(doc) { doc.rewrite('pre[class~=language-ruby] code') {|code| code.add_class('prettyprint ruby') } }
        #SelfContained
      )

      File.write(infile.sub(/md$/, 'html'), doc.to_html)
    end
  end

  def add_custom_assets(doc)
    doc.rewrite('head') do |head|
      head
          .add_child(H[:link, rel: 'stylesheet', href: file_uri_relative('stylesheets/stylesheet.css')])
          .add_child(H[:link, rel: 'stylesheet', href: file_uri_relative('stylesheets/highlight.css')])
          .add_child(H[:script, src: 'http://code.jquery.com/jquery-1.10.1.min.js'])
          .add_child(H[:script, src: file_uri_relative('javascripts/impress_js_addons.js')])
          .add_child(H[:script, src: file_uri_relative('javascripts/highlight.pack.js')])
          .add_child(H[:script, 'hljs.initHighlightingOnLoad();'])
    end
  end

  def file_uri_relative(path)
    "file://#{File.expand_path(File.join('..', path), __FILE__)}"
  end
end
